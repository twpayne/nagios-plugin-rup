#!/usr/bin/env python
#
#   check_xserve_rup  Nagios plugin to check hosts using rup
#   Copyright (C) 2010  Tom Payne
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.


from optparse import OptionParser
import re
from subprocess import Popen, PIPE
import sys


OK, WARNING, CRITICAL, UNKNOWN = xrange(0, 4)
status_message = 'OK WARNING CRITICAL UNKNOWN'.split()


def main(argv):
    parser = OptionParser()
    parser.add_option('-H', metavar='ADDRESS', dest='host')
    parser.add_option('-w', metavar='WLOAD1,WLOAD5,WLOAD15', dest='warning')
    parser.add_option('-c', metavar='CLOAD1,CLOAD5,CLOAD15', dest='critical')
    options, args = parser.parse_args(argv[1:])
    exit_status = OK
    line = Popen(['/usr/bin/rup', options.host], stdout=PIPE).communicate()[0]
    m = re.match(r'\S+\s+up\s+.*,\s+load\s+average:\s+(\d+\.\d+)\s+(\d+\.\d+)\s+(\d+\.\d+)\s*\Z', line, re.M)
    if m:
        load_average = map(float, m.group(1, 2, 3))
        if options.warning:
            for l, w in zip(load_average, map(float, options.warning.split(','))):
                if l > w:
                    exit_status = max(exit_status, WARNING)
        if options.critical:
            for l, c in zip(load_average, map(float, options.critical.split(','))):
                if l > c:
                    exit_status = max(exit_status, CRITICAL)
        message = 'load average: %s, %s, %s' % m.group(1, 2, 3)
    else:
        exit_status = max(exit_status, UNKNOWN)
        message = line.rstrip()
    print '%s - %s' % (status_message[exit_status], message)
    sys.exit(exit_status)


if __name__ == '__main__':
    main(sys.argv)
